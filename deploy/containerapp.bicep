param location string
param environmentName string
param containerAppNameGrafana string
param containerAppNameInflux string
param revisionMode string = 'Single'
param buildNr string
param containerregistry string
param image string
param fullImage string = '${containerregistry}/${image}:${buildNr}'

var managedIdentityName = 'id-services-${environmentName}'
resource managedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30' existing = {
    name: managedIdentityName
}

resource storageAccount 'Microsoft.Storage/storageAccounts@2022-09-01' existing = {
    name: 'sagrafana${environmentName}'

    resource fileServices 'fileServices@2023-01-01' = {
        name: 'default'

        resource fileSharegrafana 'shares@2023-01-01' = {
            name: 'grafana-storage'
            properties: {
                shareQuota: 1 // Max it to the min
            }
        }

        resource fileShareinflux 'shares@2023-01-01' = {
            name: 'influxdb-storage'
            properties: {
                shareQuota: 1 // Max it to the min
            }
        }
    }
}

resource containerAppEnvironment 'Microsoft.App/managedEnvironments@2023-05-02-preview' existing = {
    name: 'acae-services-${environmentName}'

    resource fileStoragegrafana 'storages@2023-05-01' = {
        name: 'grafana-database'
        properties: {
            azureFile: {
                accountKey: storageAccount.listKeys().keys[0].value
                accountName: storageAccount.name
                shareName: storageAccount::fileServices::fileSharegrafana.name
                accessMode: 'ReadWrite'
            }
        }
    }

    resource fileStorageinfluxdb 'storages@2023-05-01' = {
        name: 'influxdb-database'
        properties: {
            azureFile: {
                accountKey: storageAccount.listKeys().keys[0].value
                accountName: storageAccount.name
                shareName: storageAccount::fileServices::fileSharegrafana.name
                accessMode: 'ReadWrite'
            }
        }
    }
}

resource containerApp 'Microsoft.App/containerApps@2023-05-01' = {
    name: containerAppNameGrafana
    location: location
    identity: {
        type: 'UserAssigned' // You can use 'SystemAssigned' if you prefer
        userAssignedIdentities: {
            '${managedIdentity.id}': {}
        }
    }
    properties: {
        managedEnvironmentId: containerAppEnvironment.id
        configuration: {
            activeRevisionsMode: revisionMode
            ingress: {
                external: true
                targetPort: 3000
            }
        }
        template: {
            volumes: [
                {
                    name: 'grafana-database'
                    storageType: 'AzureFile'
                    storageName: containerAppEnvironment::fileStoragegrafana.name
                }
            ]
            //revisionSuffix: revisionSuffix
            containers: [
                {
                    image: 'grafana/grafana:latest'
                    name: containerAppNameGrafana
                    volumeMounts: [
                        {
                            volumeName: 'grafana-database'
                            mountPath: '/var/lib/grafana'
                        }
                    ]
                    resources: {
                        cpu: json('1.0')
                        memory: '2.0Gi'
                    }
                    env: [
                        {  
                            name: 'GF_SERVER_ROOT_URL'
                            value: '[GRAFANA_ROOT_URL]'
                        }
                        {
                            name: 'GF_SECURITY_ADMIN_USER'
                            value: '[ADMIN_USER]'
                        }
                        {
                            name: 'GF_SECURITY_ADMIN_PASSWORD'
                            value: '[ADMIN_PASSWORD]'
                        }
                    ]
                }
            ]
            scale: {
                minReplicas: 1
                maxReplicas: 1
            }
        }
    }
    dependsOn: [
        containerAppEnvironment
        managedIdentity
    ]
}

resource containerAppInflux 'Microsoft.App/containerApps@2023-05-01' = {
    name: containerAppNameInflux
    location: location
    identity: {
        type: 'UserAssigned' // You can use 'SystemAssigned' if you prefer
        userAssignedIdentities: {
            '${managedIdentity.id}': {}
        }
    }
    properties: {
        managedEnvironmentId: containerAppEnvironment.id
        configuration: {
            activeRevisionsMode: revisionMode
            ingress: {
                external: true
                targetPort: 8086
            }
        }
        template: {
            volumes: [
                {
                    name: 'influxdb-database'
                    storageType: 'AzureFile'
                    storageName: containerAppEnvironment::fileStorageinfluxdb.name
                }
            ]
            //revisionSuffix: revisionSuffix
            containers: [
                {
                    image: 'influxdb:2.0'
                    name: containerAppNameInflux
                    volumeMounts: [
                        {
                            volumeName: 'influxdb-database'
                            mountPath: '/var/lib/influxdb2'
                        }
                    ]
                    resources: {
                        cpu: json('0.5')
                        memory: '1.0Gi'
                    }
                    env: [
                        {
                            name: 'DOCKER_INFLUXDB_INIT_MODE'
                            value: 'setup'
                        }
                        {
                            name: 'DOCKER_INFLUXDB_INIT_USERNAME'
                            value: '[ADMIN_USER]'
                        }
                        {
                            name: 'DOCKER_INFLUXDB_INIT_PASSWORD'
                            value: '[ADMIN_PASSWORD]'
                        }
                        {
                            name: 'DOCKER_INFLUXDB_INIT_ORG'
                            value: 'GrypeScanOrg'
                        }
                        {
                            name: 'DOCKER_INFLUXDB_INIT_BUCKET'
                            value: 'GrypeScanResults'
                        }
                    ]
                }
            ]
            scale: {
                minReplicas: 1
                maxReplicas: 1
            }
        }
    }
    dependsOn: [
        containerAppEnvironment
        managedIdentity
    ]
}


resource containerJobVulnerabilityAggregator 'Microsoft.App/jobs@2024-03-01' = {
    name: image
    location: location
    identity: {
        type: 'UserAssigned' // You can use 'SystemAssigned' if you prefer
        userAssignedIdentities: {
            '${managedIdentity.id}': {}
        }
    }
    properties: {
        environmentId: containerAppEnvironment.id
        configuration: {
            replicaRetryLimit: 2
            replicaTimeout: 60
            scheduleTriggerConfig: {
                cronExpression: '0 3 * * *'
                parallelism: 1
                replicaCompletionCount: 1
              }
            triggerType: 'Schedule'
            registries: [
                {
                    server: containerregistry
                    identity: managedIdentity.id
                }
            ]
        }
        template: {
            //revisionSuffix: revisionSuffix
            containers: [
                {
                    image: fullImage
                    name: image
                    resources: {
                        cpu: json('0.25')
                        memory: '0.5Gi'
                    }
                }
            ]

        }
    }
    dependsOn: [
        containerAppEnvironment
        managedIdentity
    ]
}

output url string = 'https://${containerApp.properties.configuration.ingress.fqdn}'
